# Refrence Lorito Asm file.

# Every block begins with a sub header and ends with a block closer (.end;)
.sub "â€“#named"
  
.end;

# Each block contains 0 or more statements of the form:
#  (<Label>)? 
#  ( <Destination Register> = )? 
#  <Register Type>? <Opcode> 
#  ( <Left Source> ,? | <Left Source> , <Right Source> )?
#  ( : <Immediate> | : <Jump Location> | : <Offset> ) ;

# Registers are the form "$(I | N | S | P)?(digit 0-31)"
#  Yes, the type of the register is optional since we always declare the
#  opcode's registers type

# There is an implied return at the end of each block

.sub 'block'
  start: 
  $S0 = STR LOAD_CONST :[s0];
  #STR SAY $S0;
  #STR GRIPE $S0;

  $I3 = INT LOAD_IMM :'block'[i0+1];
  $I4 = INT LOAD_IMM :block[i0+1];
  $I4 = INT LOAD_CONST :block[i0+1];
  $I1 = INT LOAD_IMM :3000;
  #$I0 = INT LOAD_IMM :200;
  $I2 = INT ADD $I0, $I1;

  $P0 = INT NEW :20;
  $P1 = PMC NEW $P0;
  $P2 = NEW $P0;
  $I5 = INT LOAD_IMM :5;
  #INT SAY $I1;
  $P2 = INT STORE $I1, $I5;
  $I3 = INT LOAD $P2, $I5;
  #INT SAY $I3;

  $I6 = INT LOAD_IMM :20;
  $I7 = INT LOAD_IMM :0;
  $I9 = INT LOAD_IMM :1;
  $S1 = STR LOAD_CONST :[s1];
  loop:
    INT WRITE $I6;
    STR WRITE $S1;
    $I8 = INT LOAD $P2, $I7 :1;
    INT SAY $I8;
    $I6 = INT SUB $I6, $I9;
    $I7 = INT ADD $I7, $I9;
    $I10 = INT ISEQ $I6, $I0;
    INT IF $I10 :last_loop;
    : GOTO :loop;
  
  last_loop:

  $I5 = INT LOAD_IMM :9;
  $P2 = PMC STORE $P0, $I5;
  $P3 = PMC LOAD $P2, $I5;
  $I3 = INT LOAD $P2, $I5;

  $I1 = INT LOAD_IMM :3000;
  $I3 = INT LOAD_IMM :0;
  $I5 = INT LOAD_IMM :1;
  label1:
    $1 = INT SUB $I1, $I5;
    $0 = INT ISEQ $I1, $3;
    INT IF $I0 :end;
  : GOTO :label1;

  $I6 = INT ADD $I4, $I5;

  end: NOOP;
.end;

.data 'block'
  s1: " - ";
  i0: 1;
  i1: 200;
  n0: 1.1;
      255;
  s0: "Hello World!";
      30;
.end;
